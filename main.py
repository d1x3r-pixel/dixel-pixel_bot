from turtle import pos
from urllib.request import urlopen
from setuptools import Command
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
import telegram
from telegram.ext import (
    CallbackContext,
    Updater,
    PicklePersistence,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
)
from cred import TOKEN
from menu import main_menu_keyboard,posle_menu_keyboard
from key_buttons import tele_button, buttons
from pars import*

def start(update: Update, context: CallbackContext):
    # context.bot.send_sticker(
    #      chat_id=update.effective_chat.id,
    #      sticker='CAACAgIAAxkBAAEFNoRixrPefDYKBB1bL-B7hqAsFt1_CwACs3cBAAFji0YMTTkAAU5m1y2uKQQ'
     update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username} –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω LoveFlowers:)'.format(
            username=update.effective_user.first_name
            if update.effective_user.first_name is not None
            else update.effective_user
        ),
        reply_markup=main_menu_keyboard()
    )
def ha_menu(update: Update, context: CallbackContext):
    update.message.reply_text(facta[0]),


def resie_curse_menu(update: Update, context: CallbackContext):
    update.message.reply_text(
        text='''
üü¢1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:
     "–°–∞–º–æ–≤—ã–≤–æ–∑ " –∏–ª–∏ "–î–æ—Å—Ç–∞–≤–∫–∞".
üü¢2. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.    
üü¢3. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞. 
üü¢!!! –í –ë–õ–ò–ñ–ê–ô–®–ï–ï –í–†–ï–ú–Ø –í–ê–ú –ü–û–ó–í–û–ù–ò–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†:) !!!'''

    ),
def haha_menu(update: Update, context: CallbackContext):
    update.message.reply_text(random.choice(facts)),


    

def rese_menu(update: Update, context: CallbackContext):
    update.message.reply_text(
        'üü¢–ö–Ω–∏–≥–∞ –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π - –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π —á–µ—Å—Ç–Ω—ã–π –æ—Ç–∑—ã–≤ –∏ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞—à–µ–º—É —Å–∞–ª–æ–Ω—É :)'
    ),
COURSE5_RAGEX = r'(?=(' + (tele_button[5]) + r'))'
COURSE4_RAGEX = r'(?=(' + (tele_button[4]) + r'))'
COURSE3_RAGEX = r'(?=(' + (tele_button[2]) + r'))'
COURSE2_RAGEX = r'(?=(' + (tele_button[3]) + r'))'
COURSE1_RAGEX = r'(?=(' + (tele_button[0]) + r'))'
COURSE_RAGEX = r'(?=(' + (tele_button[1]) + r'))'
CNOPKI = r'(?=(' + (buttons[0]) + r'))'
CNOPKI1 = r'(?=(' + (buttons[1]) + r'))'
LESSON_RAGEX = r'(?=(' + (buttons[2]) + r'))'




def prochee_inline_menu( update: Update, context: CallbackContext):
    keyboard = [
        [
            InlineKeyboardButton('–†–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='rek'),
            InlineKeyboardButton('–°–æ—Ü.—Å–µ—Ç–∏', callback_data='xet'),
            InlineKeyboardButton('üå∑–ó–∞ 1 –¶–≤–µ—Ç–æ–∫ ',callback_data='chena'),
        ]
    ]


    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        'üü¢–í—ã–±–µ—Ä–µ—Ç–µ –æ–ø—Ü–∏—é',
        reply_markup=reply_markup
    )



def butto(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == 'rek':
         context.bot.send_message(
            update.effective_chat.id,
            text = '''
üí≥–û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µüí≥:
                    1Ô∏è‚É£Visa: 4215 8901 1616 7039
                    2Ô∏è‚É£Mbank: +996 559 576 000
                    3Ô∏è‚É£–≠–ª—Å–æ–º: +996 559 576 000




üì≤–ó–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞üì≤:
                             üü¢ +996 700 777 123
            '''
         )
        

    if query.data == 'xet':
        context.bot.send_message(
            update.effective_chat.id,
            text = '''
Instagram:'https://tinyurl.com/mr2z45mk'    
Whatsapp:'https://tinyurl.com/ykhdd55n'
                '''

    )

    if query.data == 'chena':
        context.bot.send_message(
            update.effective_chat.id,
            text = '''   
üå∑–†–æ–∑–∞ –≥–æ–ª–ª–∞–Ω–¥—Å–∫–∞—è (70—Å–º) 1—à—Ç 250 —Å–æ–º.
üå∑–•—Ä–∏–∑–∞–Ω—Ç–µ–º–∞ Bacardi 1—à—Ç 150 —Å–æ–º.
üå∑–õ–∏–ª–∏—è 1—à—Ç 350 —Å–æ–º.
                '''

    )



def menu(update: Update, context: CallbackContext):
    update.message.reply_text(  
        "üü¢–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu_keyboard()
    )  


def resive_curse_menu(update:Update, context: CallbackContext):
    update.message.reply_text(
        'üü¢–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –±–æ–ª–µ–µ —É–¥–æ–±–µ–Ω',
        reply_markup=posle_menu_keyboard()
    ), 




def button(update:Update, context: CallbackContext):
        update.message.reply_text(
        'tinyurl.com/yc77y7hf',
        reply_markup=posle_menu_keyboard()
    ),


def buttons(update:Update, context: CallbackContext):
    update.message.reply_text(
        'https://tinyurl.com/2ws3696z', 
        reply_markup=posle_menu_keyboard()
    ),





def zap(update: Update, context: CallbackContext):
    a = update.message.text
    print(a[:6])
    print(a)

    if a[:6] == '–î–æ—Å—Ç–∞–≤–∫–æ–π' or '–°–∞–º–æ–≤—ã–≤–æ–∑' or '–ù–∞–¥–æ–º':
        context.bot.send_message(
            chat_id='@asdasdasdqweqweq',
            text=a

        ),





updater = Updater(TOKEN, persistence=PicklePersistence(filename='bot-data'))
updater.dispatcher.add_handler(CommandHandler('start', start))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(COURSE_RAGEX),
    resie_curse_menu
))
updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(COURSE2_RAGEX),
    rese_menu
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(COURSE4_RAGEX),
    prochee_inline_menu
))


updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(COURSE5_RAGEX),
    ha_menu
))





updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(COURSE1_RAGEX),
    resive_curse_menu
))


updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(CNOPKI),
    button
))


updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(LESSON_RAGEX),
    menu
))

updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(COURSE3_RAGEX),
    haha_menu
))
updater.dispatcher.add_handler(MessageHandler(
    Filters.regex(CNOPKI1),
    buttons
))




updater.dispatcher.add_handler(MessageHandler(
    Filters.text,
    zap
))

updater.dispatcher.add_handler(CallbackQueryHandler(butto))
updater.start_polling(),
updater.idle(),
